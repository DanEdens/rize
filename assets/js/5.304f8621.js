(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{49:function(t,a,e){"use strict";e.r(a);var s=e(0),n=Object(s.a)({},function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"find-elements"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#find-elements","aria-hidden":"true"}},[t._v("#")]),t._v(" Find Elements")]),t._v(" "),e("h2",{attrs:{id:"brief"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#brief","aria-hidden":"true"}},[t._v("#")]),t._v(" Brief")]),t._v(" "),e("p",[t._v("All the APIs of "),e("code",[t._v("Rize")]),t._v(" just support the first element which matched the CSS selector you gave. However, sometimes you may want to find non-first-matched element, just like calling "),e("code",[t._v("document.querySelectorAll")]),t._v(".")]),t._v(" "),e("p",[t._v("Rize provides three special methods to let you find elements, even by XPath, if you like. These three methods are "),e("a",{attrs:{href:"https://rize.js.org/api/classes/_index_.rize.html#find",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("find")]),e("OutboundLink")],1),t._v(", "),e("a",{attrs:{href:"https://rize.js.org/api/classes/_index_.rize.html#findall",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("findAll")]),e("OutboundLink")],1),t._v(" and "),e("a",{attrs:{href:"https://rize.js.org/api/classes/_index_.rize.html#findbyxpath",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("findByXPath")]),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("find")]),t._v(" method just find the first element which matched the CSS selector, whose behavior is like "),e("code",[t._v("document.querySelector")]),t._v(". So most of time you may not need to use this method.")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("findAll")]),t._v(" method does as "),e("code",[t._v("document.querySelectorAll")]),t._v(", but it doesn't return an array of elements. In fact, you should specify the index of the element you want to operate. The "),e("code",[t._v("findByXPath")]),t._v(" method does the same thing and the difference between "),e("code",[t._v("findAll")]),t._v(" and "),e("code",[t._v("findByXPath")]),t._v(" is the former use CSS selector while the latter use XPath.")]),t._v(" "),e("p",[t._v("All the examples and documentation below will use "),e("code",[t._v("findAll")]),t._v(". As the usage of "),e("code",[t._v("findByXPath")]),t._v(" is same as "),e("code",[t._v("findAll")]),t._v(". (Just replace the CSS selector with XPath.)")]),t._v(" "),e("h2",{attrs:{id:"signature-of-those-methods"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#signature-of-those-methods","aria-hidden":"true"}},[t._v("#")]),t._v(" Signature of those methods")]),t._v(" "),e("h3",{attrs:{id:"the-first-parameter"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#the-first-parameter","aria-hidden":"true"}},[t._v("#")]),t._v(" The first parameter")]),t._v(" "),e("p",[t._v("The first parameter of "),e("code",[t._v("findAll")]),t._v(" method is CSS selector while the first parameter of "),e("code",[t._v("findByXPath")]),t._v(" is an XPath expression. So Rize will find elements according to the CSS selector or XPath expression you gave.")]),t._v(" "),e("h3",{attrs:{id:"the-second-parameter"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#the-second-parameter","aria-hidden":"true"}},[t._v("#")]),t._v(" The second parameter")]),t._v(" "),e("p",[t._v("The second parameter of those two methods is "),e("code",[t._v("index")]),t._v(". You must specify the index of the element you want in the array of elements.")]),t._v(" "),e("h3",{attrs:{id:"the-third-parameter"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#the-third-parameter","aria-hidden":"true"}},[t._v("#")]),t._v(" The third parameter")]),t._v(" "),e("p",[t._v("The third parameter of those two methods is a function. You can pass Rize APIs here, but not all APIs work.")]),t._v(" "),e("p",[t._v("That function must have no more than three parameters. If you have a function which has more than three parameters, please refactor it or write another function to wrap it. (Too many parameters in one function is not a good practice.)")]),t._v(" "),e("p",[t._v("Besides, the first parameter of that function must receive a string as a valid CSS selector.")]),t._v(" "),e("h3",{attrs:{id:"the-rest-parameters"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#the-rest-parameters","aria-hidden":"true"}},[t._v("#")]),t._v(" The rest parameters")]),t._v(" "),e("p",[t._v("All the rest parameters will be passes as arguments to the third parameter (which is a function).")]),t._v(" "),e("h2",{attrs:{id:"examples"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#examples","aria-hidden":"true"}},[t._v("#")]),t._v(" Examples")]),t._v(" "),e("p",[t._v("Here are some examples:")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" rize "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{attrs:{class:"token class-name"}},[t._v("Rize")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nrize"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("findAll")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token string"}},[t._v("'div'")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{attrs:{class:"token number"}},[t._v("0")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rize"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("assertVisible"),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nrize"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("findAll")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token string"}},[t._v("'div'")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{attrs:{class:"token number"}},[t._v("1")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rize"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("assertClassHas"),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v("'my-class'")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("The example above are valid, because the method "),e("code",[t._v("assertVisible")]),t._v(" and "),e("code",[t._v("assertClassHas")]),t._v(" receive a string as CSS selector in their first parameter.")]),t._v(" "),e("p",[t._v("However, the example below are invalid:")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{attrs:{class:"token comment"}},[t._v("// Don't do like this!")]),t._v("\n"),e("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" rize "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{attrs:{class:"token class-name"}},[t._v("Rize")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nrize"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("findAll")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token string"}},[t._v("'div'")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{attrs:{class:"token number"}},[t._v("0")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rize"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("assertTitle"),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("Though the first parameter of "),e("code",[t._v("assertTitle")]),t._v(" receive a string, it is not regarded as CSS selector.")]),t._v(" "),e("p",[t._v("As a matter of fact, you can pass a custom function not only Rize's APIs.")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" rize "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{attrs:{class:"token class-name"}},[t._v("Rize")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" value "),e("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{attrs:{class:"token keyword"}},[t._v("await")]),t._v(" rize"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("findAll")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),e("span",{attrs:{class:"token string"}},[t._v("'input'")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{attrs:{class:"token number"}},[t._v("0")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    selector "),e("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" rize"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("evaluate")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      s "),e("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" document"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("querySelector")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      selector\n    "),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("You may concern about what is the return value of "),e("code",[t._v("find")]),t._v(", "),e("code",[t._v("findAll")]),t._v(" and "),e("code",[t._v("findByXPath")]),t._v(" method. Honestly, it is determined by the function you passed as the third parameter.")])])},[],!1,null,null,null);n.options.__file="find-elements.md";a.default=n.exports}}]);